/** TriCl, a generic model of social dynamics
 *
 * \file
 * \author Jobst Heitzig, Potsdam Institute for Climate Impact Research, heitzig@pik-potsdam.de
 * \date March 2020
 *
 *
 * \mainpage TriCl, a generic model of social dynamics
 *
 * \tableofcontents
 *
 * Introduction
 * ============
 *
 * TriCl is a tool for running simulations of various kinds of social dynamics,
 * modeled by specifying when certain types of relationships between two entities of certain types form or vanish
 * or certain types actions between two entities happen.
 *
 * This is the code documentation automatically generated by doxygen
 * and is meant as a resource for code developers
 * (Model developers please see <a href="https://github.com/mensch72/tricl">the README.md file in the tricl github repository</a>).
 *
 * TriCl is implemented in C++.
 * Its top-level code file is \ref tricl.cpp, its main function is \ref main().
 *
 *
 * TODO
 * ====
 *
 * model capabilities:
 * - allow legs to influence termination
 * - allow legs to influence success prob. of establishment
 * - allow legs to attempt establishment
 * - add actions
 *
 * simulation options:
 * - as an alternative to tmax and max_n_events, add max_wall
 * - add a particle filtering mode
 *
 * network theory stuff:
 * - output triangle counts clustering coefficient(s)
 * - add more random network models
 *
 * convenience:
 * - support custom prefixes for entity label generation
 * - check whether in finish(), current_t = max_t is correct
 * - metaparameters: identifier: [value, description] --> cmd. line help
 *
 * optimization:
 * - use const args as much as possible in inner loops (?)
 * - inline most called functions
 * - speed up probability2probunits by precomputing probability for events with constant success probability
 * - think of partial parallelization
 *
 * input/output:
 * - include metadata into gexf files
 * - redirect messages to log file
 * - support "premerged" edges in gexf via <spells><spell start="..." end="..."></spell>...</spells>,
 *   by a postprocessing step that firts sorts and then merges the edges in the file by doing
 *   ``gunzip -c myoutput.gexf.gz | sort -t"-" -k3 | mergelinks | gzip > mysortedoutput.gexf.gz``
 *   for which we need to provide a binary "mergelinks"
 * - support prespecified positions in visualization, see here: <https://github.com/gephi/gephi/issues/2038>
 * - support entity type detection from columns in csv file
 *
 * model estimation:
 * - add command line options --events=events.csv, --logl and --grad
 * - if given, read lines from events.csv rather than pop_next_event
 * - if --logl, accumulate loglikelhood instead of scheduling and write only logl to stdout
 * - if --grad, also accumulate and output gradient w.r.t. metaparameters
 * - write python template script for estimating metaparameters by max.likelihood method, using scipy.optimize
 *
 * Terminology
 * ===========
 *
 * - \b entity type: a type of concrete or abstract entity (see below),
 *                   e.g. "an individual", "a news channel", "a social group", "an opinion", or "an infection state"
 *
 * - \b entity: any concrete or abstract object that can stand in a relationship with other entities,
 *              e.g. "John", "the BBC", "catholics", "Elvis lives", or "infected with Dengue"
 *
 * - \b relationship \b type: any concrete or abstract type of directed relationship two entities can stand in,
 *                            e.g. "is friends with", "is a subscriber of", "belongs to", "holds", or "is".
 *                            the special relationship type "=" (with id RT_ID) encodes the identity of an entity with itself.
 *
 * - \b action \b type: any type of thing that can happen at a singular time point between two entities,
 *                      e.g. "kisses" or "utters that" (not implemented yet)
 *
 * - \b act: a pair of entities plus an action type plus a time-point.
 *           we say the act "occurs" at that time.
 *
 * - \b link \b type: a pair of entity types plus a relationship or action type,
 *                    e.g. "an individual - is a subscriber of - a news channel" or "an individual - utters - an opinion"
 *
 * - \b link: a pair of entities plus a relationship or action type,
 *            e.g. "John - is a subscriber of - the BBC".
 *            if it has a relationship type, a link "exists" as long as the entities stand in the respective relationship.
 *            if it has an action type, a link "flashes" whenever a corresponding act occurs.
 *            the source entity id is called "e1" in code, the destination entity id "e3" (because of angles, see below)
 *
 * - \b relationship: a link of relationship type
 *
 * - \b action: a link of action type (not to be confused with an act!)
 *
 * - \b impact of an action: a nonnegative real number that is increased by one whenever the link flashes
 *                           and decays exponentially at a certain rate.
 *                           a link's impact determines the link's influence on adjacent events.
 *
 * - \b event: an event class plus a link, e.g.
 *             - "establishment of the link 'John - is a subscriber of - the BBC'" (event class EC_EST)
 *             - "termination of the link 'John - is friends with - Alice'" (event class EC_TERM)
 *             - "occurrence of the act 'Alice - utters that - Elvis lives'" (event class EC_ACT)
 *
 * - \b leg: a relationship or action type rat plus an entity.
 *           a leg can influence an adjacent termination event but no establishment or act occurrence events
 *
 * - \b angle: a middle entity plus pair of relationship or action types.
 *             an angle can influence any adjacent event.
 *             an angle can also encode a leg if either relationship or action type equals the special value NO_RT
 *
 * - \b influence: a event plus a leg or angle that influences it (or the special value NO_ANGLE if the event happens spontaneously)
 *
 * - \b attempt \b rate of an influence: the probability rate with which the influence attempts the corresponding event
 *
 * - \b success \b probability \b units of an event: probability that an attempted event actually happens,
 *                                                   transformed via a sigmoidal function.
 *
 * The following diagrams show the relationships between these types of things:
 *
 *       e1 –––––––––rat13–––––––––> e3
 *     entity     relationship     entity
 *       .       or action type       .
 *       .             .              .
 *       .       \______________________/
 *       .           an out-leg for e1
 *       .             .              .
 *     \______________________/       .
 *         an in-leg for e3           .
 *       .             .              .
 *     \________________________________/
 *                   a link
 *
 *
 *       e1 ––rat12––> e2 ––rat23––> e3
 *      \______________________________/
 *                  an angle
 *
 *
 * Naming conventions
 * ==================
 *
 * Abbreviations used in variable naming
 * -------------------------------------
 *
 * - \b ar: attempt rate
 * - \b spu: success probability units
 *
 * - \b e: entity
 * - \b e1: source entity of a link or event
 * - \b e2: middle entity of an angle or influence, or "other" entity of a leg
 * - \b e3: target entity of a link or event
 *
 * - \b et: entity type
 * - \b et1: source entity type of a link or event type
 * - \b et2: middle entity type of an angle or influence type, or other entity type of a leg type
 * - \b et3: target entity type of a link or event type
 *
 * - \b ev: event
 * - \b evt: event type
 *
 * - \b infl: influence
 * - \b inflt: influence type
 *
 * - \b l: link
 * - \b lt: link type
 *
 * - \b rat: relationship or action type
 * - \b rat13: type of rel. or action from source to target of a link or event
 * - \b rat12: type of rel. or action from source to middle/other entity
 * - \b rat23: type of rel. or action from middle/other entity to target
 *
 * - \b t: timepoint
 *
 * - trailing \b _: pointer
 * - trailing \b _it: pointer used as iterator
 *
 * - \b x2y: map mapping xs to ys (typically a map, unordered_map, or vector)
 *
 * Other naming conventions
 * ------------------------
 *
 * - void functions are named by imperatives (e.g., "do_this")
 * - non-void functions are named by nouns (e.g., "most_important_thing")
 *
 */

// DEBUG or RELEASE mode?
// for debug mode comment the following line, for release mode leave it uncommented:
//#define NDEBUG

// INCLUDES:

#include "global_variables.h"
#include "io.h"
#include "config.h"
#include "init.h"
#include "simulate.h"
#include "finish.h"
#include "debugging.h"
//#include "pfilter.h"

string config_yaml_filename; ///< filename of configuration file

/** main function of the tricl executable */
int main (int argc, char *argv[])
{
    try  // because our code sometimes deliberately throws strings upon errors
    {

        // stuff before simulation:
        read_config(argc, argv);
        init();
        if (debug) verify_data_consistency();

        // actual simulation:
        while (true)
        {
            if (!step()) break;
        }

        // stuff after simulation:
        finish();
    }
    catch (const char* msg)
    {
      cerr << "ERROR: exiting with message: " << msg << endl;
    }
    return 0;
}
