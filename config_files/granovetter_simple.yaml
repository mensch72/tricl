metadata:
    name: Granovetter simple micromodel 
    description: 
        simple implementation of Wiedermann's micro-version 
        of the Granovetter model
    author: Jobst Heitzig
    date: 14 April 2020
    email: heitzig@pik-potsdam.de

files:
    gexf: granovetter_simple.gexf
    diagram prefix: granovetter_simple

metaparameters:  
    # will be substituted for their values 
    # in expressions occurring in the rest of the config file

    N: 1000   # total numbers of agents
    a: 0.25   # share of certainly active
    b: 0.2    # share of certainly inactive
    k: 10     # mean degree
    rho: 0.5  # threshold fraction

limits:
    t: 100.0
    events: 30001 # use an odd number since events come in pairs in this model

options:
    quiet: false
    verbose: false
    debug: false
    seed: 0

entities:

    # regular entity types:
    agent: N

    # single-entity types:
    active:
        - active

relationship types:
    knows: symmetric
    is always: ~
    is never: ~
    is: ~
    is not: ~

initial links: 
    random:
        [agent, knows, agent]:
            probability: k / (N-1)  # ER model
#            dimension: 2  # random geometric model
#            decay: 15.0
        [agent, is always, active]:
            probability: a  # share of certainly actives
        [agent, is never, active]:
            probability: b / (1 - a)  
                # share of certainly inactives divided by 1-a 
                # (since a share of  a  of these will switch to certainly active at t=0 
                # to avoid overlap between the two groups, see below) 
        [agent, is not, active]:
            probability: 1.0  # but this will change immediately for the certainly actives at time 0

dynamics:

    [agent, is, active]:
        establish:
            attempt:
                base: 1.0 *2  # twice (!) the individual rate of "updating" (since only half the updates succeed)
                [agent, =, agent, is always, active]: inf
            success:
                tails: 0  # -> use expit sigmoid function
                base: +10  # chosen so that base probability is approx. 1
                [agent, knows, agent, is, active]: +20*(1-rho)
                [agent, knows, agent, is not, active]: -20*rho
                # if ki*rho many nbs are active and ki*(1-rho) many are inactive,
                # total success units are +10 + ki*rho * 20*(1-rho) - ki*(1-rho) * 20*rho = +10, hence prob. is approx 1.
                # if one less is active and one more is inactive,
                # total success units are +10 + (ki*rho - 1) * 20*(1-rho) - (ki*(1-rho) + 1) * 20*rho = -10, hence prob. is approx 0.
        terminate:
            attempt:
                [agent, =, agent, is not, active]: inf

    [agent, is not, active]:
        establish:
            attempt:
                base: 1.0 *2  # twice (!) the individual rate of "updating" (since only half the updates succeed)
                [agent, =, agent, is never, active]: inf
            success:
                tails: 0  # -> use expit sigmoid function
                base: -10  # chosen so that base probability is approx. 0
                [agent, knows, agent, is, active]: -20*(1-rho)
                [agent, knows, agent, is not, active]: +20*rho
                # if ki*rho many nbs are active and ki*(1-rho) many are inactive,
                # total success units are -10 - ki*rho * 20*(1-rho) + ki*(1-rho) * 20*rho = -10, hence prob. is approx 0.
                # if one less is active and one more is inactive,
                # total success units are -10 - (ki*rho - 1) * 20*(1-rho) + (ki*(1-rho) + 1) * 20*rho = +10, hence prob. is approx 1.
        terminate:
            attempt:
                [agent, =, agent, is, active]: inf

    # this only ensures that at t=0, those who have randomly been deemed both
    # certainly active and certainly inactive switch to certainly active:
    [agent, is never, active]:
        terminate:
            attempt:
                [agent, =, agent, is always, active]: inf
